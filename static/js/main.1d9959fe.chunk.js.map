{"version":3,"sources":["redux/toDo/todo.types.js","component/ToDoCard/ToDoCard.jsx","redux/toDo/todo.actions.js","views/ToDoList/ToDoList.jsx","redux/toDo/todo.selectors.js","views/AddToDo/AddToDoForm.jsx","redux/toDo/todo.reducer.js","redux/rootReducers.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["types","ADD_TO_DO","EDIT_TO_DO","DELETE_TO_DO","TOGGLE_CHECK_ITEM_TODO","connect","deleteToDo","todoID","type","payload","toggleToDoCheckItemStatus","itemId","toDo","history","useHistory","useState","dropdownOpen","setDropdownOpen","isOpen","setIsOpen","Card","CardHeader","className","title","Dropdown","id","toggle","event","target","attributes","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","header","onClick","push","CardBody","text","Button","size","color","style","marginBottom","Collapse","checkList","map","checkItem","key","FormGroup","check","Label","cursor","Input","checked","status","onChange","state","toDoList","todo","Container","Row","item","Col","xs","md","toDoId","createSelector","items","length","mapStateToProps","createStructuredSelector","addToDo","editToDo","useParams","todoObject","useSelector","find","setTodo","checkItems","setCheckItems","handleChange","name","value","Form","onSubmit","e","preventDefault","htmlFor","handleChangeCheck","initial_state","todoReducer","action","filter","combineReducers","middlewares","logger","createStore","rootReducer","applyMiddleware","App","store","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d9959fe.chunk.js","sourcesContent":[" const types  = {\r\n    ADD_TO_DO:\"ADD_TO_DO\",\r\n    EDIT_TO_DO:\"EDIT_TO_DO\",\r\n    DELETE_TO_DO:\"DELETE_TO_DO\",\r\n    TOGGLE_CHECK_ITEM_TODO: 'TOGGLE_CHECK_ITEM_TODO'\r\n}\r\nexport default types;","import React, { useState } from 'react';\r\nimport { deleteToDo, toggleToDoCheckItemStatus } from '../../redux/toDo/todo.actions';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    Card, CardBody, CardHeader, Dropdown, FormGroup, Label, Input,\r\n    DropdownToggle, DropdownMenu, DropdownItem, Collapse, Button\r\n} from 'reactstrap';\r\nfunction ToDoCard({ toDo, deleteToDo, toggleToDoCheckItemStatus }) {\r\n    let history = useHistory();\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const toggleMenu = (event) => {\r\n        event.target.attributes['aria-expanded'] && setDropdownOpen(prevState => !prevState);\r\n    }\r\n    const toggleCheckList = () => setIsOpen(prevState => !prevState);\r\n    return (\r\n        <Card>\r\n            <CardHeader className='d-flex justify-content-between'>\r\n                <p>{toDo.title}</p>\r\n                <Dropdown id='dfdf' isOpen={dropdownOpen} toggle={toggleMenu}>\r\n                    <DropdownToggle caret>\r\n                        Dropdown\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem header>Actions</DropdownItem>\r\n                        <DropdownItem onClick={() => history.push(`/update/${toDo.id}`)}>Edit</DropdownItem>\r\n                        <DropdownItem onClick={() => deleteToDo(toDo.id)}>Delete</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </CardHeader>\r\n            <CardBody>\r\n                {toDo.text}\r\n                <br />\r\n                <br />\r\n                <Button size={'sm'} color=\"primary\" onClick={toggleCheckList} style={{ marginBottom: '1rem' }}>Toggle</Button>\r\n                <Collapse isOpen={isOpen}>\r\n                    <ol>\r\n                        {toDo.checkList.map(checkItem =>\r\n                            <li key={`${toDo.id}${checkItem.id}`}>\r\n                                <FormGroup check>\r\n                                    <Label check style={{ cursor: 'pointer' }}>\r\n                                        <Input checked={checkItem.status} type=\"checkbox\" onChange={() => toggleToDoCheckItemStatus(toDo.id, checkItem.id)} />{' '}\r\n                                        {checkItem.status ? <del>{checkItem.text}</del> : checkItem.text}\r\n                                    </Label>\r\n                                </FormGroup>\r\n                            </li>)}\r\n                    </ol>\r\n                </Collapse>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default connect(null, { deleteToDo, toggleToDoCheckItemStatus })(ToDoCard)\r\n","import types from './todo.types';\r\n\r\nexport const addToDo = (todo) => {\r\n    return {\r\n        type: types.ADD_TO_DO,\r\n        payload: todo\r\n    }\r\n}\r\n\r\nexport const editToDo = (todo) => {\r\n    return {\r\n        type: types.EDIT_TO_DO,\r\n        payload: todo\r\n    }\r\n}\r\nexport const deleteToDo = (todoID) => {\r\n    return {\r\n        type: types.DELETE_TO_DO,\r\n        payload: todoID\r\n    }\r\n}\r\nexport const toggleToDoCheckItemStatus = (todoID , itemId) => {\r\n    return {\r\n        type: types.TOGGLE_CHECK_ITEM_TODO,\r\n        payload: {todoID , itemId}\r\n    }\r\n}","import React from 'react';\r\nimport ToDoCard from '../../component/ToDoCard/ToDoCard';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Container, Col } from 'reactstrap';\r\nfunction ToDoList({ toDoList }) {\r\n\r\n    return (\r\n        <Container>\r\n            <Row className='mt-5' >\r\n                {\r\n                    toDoList.map(item =>\r\n                        <Col className='mt-3' key={item.id} xs={12} md={6}>\r\n                            <ToDoCard toDo={item} />\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        toDoList: state.todo.toDoList\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(ToDoList)\r\n","import { createSelector } from 'reselect';\r\n\r\nconst toDoList = state => state.todo.toDoList;\r\n\r\nexport const toDoId = createSelector(\r\n    toDoList,\r\n    (items)=> items.length + 1\r\n)\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Form, Input, FormGroup, Label, Button\r\n} from 'reactstrap';\r\nimport { addToDo , editToDo } from '../../redux/toDo/todo.actions'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { toDoId } from '../../redux/toDo/todo.selectors';\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nfunction AddToDoForm({ addToDo, toDoId , editToDo }) {\r\n    let history = useHistory();\r\n    let {id} = useParams();\r\n    const todoObject = useSelector(state => state.todo.toDoList.find(item => item.id == id))\r\n    const [todo, setTodo] = useState( todoObject ? {title:todoObject.title , text:todoObject.text}:{\r\n        title: '',\r\n        text: '',\r\n    })\r\n    const [checkItems, setCheckItems] = useState(todoObject ? todoObject.checkList:\r\n        [{\r\n            id: 1,\r\n            text: '',\r\n            status: false\r\n        }]\r\n    )\r\n    const addItem = () => {\r\n        setCheckItems([...checkItems, { id: checkItems.length + 1, text: '', status: false }])\r\n    }\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        setTodo({\r\n            ...todo,\r\n            [name]: value\r\n        })\r\n    }\r\n    const handleChangeCheck = (event, id) => {\r\n        setCheckItems(checkItems.map(item => item.id === id ? { ...item, text: event.target.value } : item))\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        todoObject && editToDo ({\r\n            id: todoObject.id,\r\n            ...todo,\r\n            checkList: checkItems\r\n        }) \r\n        !todoObject && addToDo({\r\n            id: toDoId,\r\n            ...todo,\r\n            checkList: checkItems\r\n        })\r\n        history.push('/')\r\n    }\r\n    return (\r\n        <div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <FormGroup>\r\n                    <Label htmlFor='title'>title</Label>\r\n                    <Input value={todo.title} onChange={handleChange} name='title' id='title' />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label htmlFor='text'>text</Label>\r\n                    <Input value={todo.text} onChange={handleChange} name='text' id='text' />\r\n                </FormGroup>\r\n                {\r\n                    checkItems.map(item =>\r\n                        <FormGroup key={item.id}>\r\n                            <Label htmlFor='text'>check item</Label>\r\n                            <Input value={item.text} onChange={(event) => handleChangeCheck(event, item.id)} name='text' id='text' />\r\n                        </FormGroup>\r\n                    )\r\n                }\r\n                <Button type='button' onClick={addItem}>add check Item</Button>{' '}\r\n                <Button>save</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n    toDoId\r\n})\r\n\r\nexport default connect(mapStateToProps, { addToDo, editToDo })(AddToDoForm)\r\n","import types from './todo.types'\r\nconst initial_state =\r\n{\r\n    toDoList: [\r\n        {\r\n            id: 1,\r\n            title: 'to do 1',\r\n            text: 'this is a check list for shop',\r\n            checkList: [\r\n                { id: 1, text: 'first job', status: false },\r\n                { id: 2, text: 'second job', status: false }\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'to do 2',\r\n            text: 'this is amother check list for maktab',\r\n            checkList: [\r\n                { id: 1, text: 'first job maktab', status: true },\r\n                { id: 2, text: 'second job maktab', status: false }\r\n            ]\r\n        }\r\n    ]\r\n}\r\nconst todoReducer = (state = initial_state, action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case types.ADD_TO_DO:\r\n            return {\r\n                ...state,\r\n                toDoList: [...state.toDoList, payload]\r\n            }\r\n        case types.EDIT_TO_DO:\r\n            return {\r\n                ...state,\r\n                toDoList: state.toDoList.map(item => item.id == payload.id ? payload : item)\r\n            }\r\n        case types.DELETE_TO_DO:\r\n            return {\r\n                ...state,\r\n                toDoList: state.toDoList.filter(item => item.id !== payload)\r\n            }\r\n        case types.TOGGLE_CHECK_ITEM_TODO:\r\n            return {\r\n                ...state,\r\n                toDoList: state.toDoList.map(item => item.id == payload.todoID ?\r\n                    {\r\n                        ...item, checkList: item.checkList.map(checkItem => checkItem.id == payload.itemId ?\r\n                            { ...checkItem, status: !checkItem.status } : checkItem)\r\n                    } : item)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default todoReducer;\r\n","import {combineReducers} from 'redux';\r\nimport todoReducer from './toDo/todo.reducer'\r\n\r\n\r\nexport default combineReducers({\r\n    todo:todoReducer\r\n})","import {applyMiddleware , createStore} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './rootReducers'\r\n\r\n\r\nconst middlewares = [logger];\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middlewares)\r\n);\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ToDoList from './views/ToDoList/ToDoList';\nimport AddToDoForm from './views/AddToDo/AddToDoForm';\nimport store from './redux/store';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'reactstrap'\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact>\n              <ToDoList />\n            </Route>\n            <Route path=\"/add\">\n              <AddToDoForm />\n            </Route>\n            <Route path=\"/update/:id\">\n              <AddToDoForm />\n            </Route>\n            <Route path=\"/todo/:id\">\n            </Route>\n          </Switch>\n        </Router>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}